name: Deploy Live App

on:
  push:
    branches:
    - main

jobs:

  delete-artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.DEPLOY_KEY }}
          expire-in: 0 # Setting this to 0 will delete all artifacts

  create-deployment-artifatcs:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    needs: delete-artifacts
    outputs:
      deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14.18.1'
      - run: | 
          npm install
          cd client && npm install && mkdir dist && npm run build:prod

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -cf "${GITHUB_SHA}".tar --exclude=client --exclude=*.git `ls -A -1` && tar -uf "${GITHUB_SHA}".tar client/dist && gzip "${GITHUB_SHA}".tar

      - name: Store artifact for disturbation
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

      - name: Export deployment matrix
        id: export-deployment-matrix
        run: |
          JSON="$(cat ./deployment-configs.json)"
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "::set-output name=deployment-matrix::$JSON"

  prepare-release-on-servers:
    name: "${{ matrix.server.name }}: Prepare release"
    runs-on: ubuntu-latest
    needs: [ delete-artifacts, create-deployment-artifatcs ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifatcs.outputs.deployment-matrix) }}
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: app-build
    - name: Upload
      uses: appleboy/scp-action@master
      with:
        host: ${{ matrix.server.ip }}
        username: ${{ secrets.USER_NAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ matrix.server.port }}
        source: ${{ github.sha }}.tar.gz
        target: ${{ matrix.server.live_path }}/artifacts

    - name: Extract archive and create directories
      uses: appleboy/ssh-action@master
      env:
        GITHUB_SHA: ${{ github.sha }}
      with:
        host: ${{ matrix.server.ip }}
        username: ${{ secrets.USER_NAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ matrix.server.port }}
        envs: GITHUB_SHA
        script: |
            mkdir -p "${{ matrix.server.live_path }}/releases/${GITHUB_SHA}"
            tar xzf ${{ matrix.server.live_path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.live_path }}/releases/${GITHUB_SHA}"

  activate-release:
    name: "${{ matrix.server.name }}: Activate release"
    runs-on: ubuntu-latest
    needs: [ delete-artifacts, create-deployment-artifatcs, prepare-release-on-servers ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifatcs.outputs.deployment-matrix) }}
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.live_path }}/releases/${{ github.sha }}
          BASE_PATH: ${{ matrix.server.live_path }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.live_path }}/live
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ secrets.USER_NAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,BASE_PATH
          script: |
            /root/.nvm/versions/node/v16.0.0/bin/pm2 delete index
            cd $RELEASE_PATH && /root/.nvm/versions/node/v16.0.0/bin/pm2 start index.js

  clean-up:
    name: "${{ matrix.server.name }}: Clean up"
    runs-on: ubuntu-latest
    needs: [ delete-artifacts, create-deployment-artifatcs, prepare-release-on-servers, activate-release]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifatcs.outputs.deployment-matrix) }}
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          RELEASES_PATH: ${{ matrix.server.live_path }}/releases
          RELEASE_PATH: ${{ matrix.server.live_path }}/releases/${{ github.sha }}
          ARTIFACTS_PATH: ${{ matrix.server.live_path }}/artifacts
          ACTIVE_RELEASE_PATH: ${{ matrix.server.live_path }}/live
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ secrets.USER_NAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: RELEASES_PATH,ARTIFACTS_PATH,ACTIVE_RELEASE_PATH,RELEASE_PATH
          script: |
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +4 | xargs rm -rf
            ln -s -n -f ${RELEASE_PATH}/client/dist $ACTIVE_RELEASE_PATH
            cd $RELEASES_PATH && ls -t -1 | tail -n +2 | xargs rm -rf